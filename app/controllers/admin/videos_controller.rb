class Admin::VideosController < Admin::Controller
  before_filter :require_user, :except => :callback
  before_filter :require_admin_user, :except => :callback

  protect_from_forgery :except => [:callback]

  layout "admin"

  def index
    @videos = Video.paginate(:all,
                             :order => "recorded_at desc",
                             :page => params[:page])
  end

  def edit
    @events = Event.find(:all,
                         :order => "start_at desc")

    @video = Video.find(params[:id])
    @presenters = Presenter.find(:all, :order => 'last_name, first_name')
    if @video.assets.count == 0
      @video.assets.build
    end
    @asset_types = AssetType.find(:all, :order => 'description')
    @rooms = Room.find(:all, :conditions => ['event_id = ?', @video.event.id])

  end

  def new
    # TODO: Sort by Conference.name then Year desc
    @events = Event.find(:all,
                         :order => "start_at desc")
    @video = Video.new
    @video.presentations.build
    @video.assets.build
    @presenters = Presenter.find(:all, :order => 'last_name, first_name')
    @asset_types = AssetType.find(:all, :order => 'description')

    @event = Event.find_by_identifier(params[:event_id])
    if @event then
      @rooms = Room.find(:all, :conditions => ["event_id = ?",@event.id])
    end

  end

  def create
    @video = Video.create(params[:video])

    if @video.save then
      flash[:success] = "The video was created successfully."
      redirect_to event_path(@video.event)
    else
      flash[:error] = "The video was not saved..."
      new
      render :action => 'new'
    end
  end

  def update
    @video = Video.find(params[:id])

    @video.attributes = params[:video]

    if @video.save
      flash[:success]="The video was saved successfully."
    else
      flash[:error]="The video changes could not be saved: " +
        @video.errors.full_messages.to_sentence
    end

    redirect_to edit_admin_video_path @video
  end

  def destroy
    @video = Video.find(params[:id])

    event = @video.event

    if @video.destroy
      flash[:success]="The video was successfully deleted."
    else
      flash[:error]="The video could not be deleted: " +
        @video.errors.full_messages.to_sentence
    end
    redirect_to admin_event_path event
  end

  def attach
    @video = Video.find(params[:id])
    @asset = Asset.new
    @asset.submit_to_zencoder = true
    @asset.submit_to_youtube = true
    @video.assets << @asset
  end

  def attach_process
    @video = Video.find(params[:id])

    base_dir = "#{RAILS_ROOT}/../../../source/"
    file = "#{@video.id}.mp4"
    full_file = "#{base_dir}#{@video.event.short_code}/#{file}"

    if File.exists?(full_file)
      a = Asset.new
      a.data = File.new(full_file)

      a.asset_type_id = 1

      @video.assets << a

      @video.save
      flash[:success]="File: #{full_file} was attached to #{@video.title}"
    else
      flash[:error] = "File: #{full_file} does not exist"
    end

    redirect_to video_path(@video)
  end

  # callback - this method is called by zencoder when an output element
  # of a job is completed
  def callback
    base_dir = "#{RAILS_ROOT}/../../../source/"

    a = Asset.find_by_zencoder_output_id(params['output']['id'])

    file_extension = "mp4"

    case a.description
    when "1280x720"
      size = "-large"
    when "640x360"
      size = "-small"
    else
      size = ""
      file_extension="mp3"
    end

    file = "#{a.video.to_param}#{size}.#{file_extension}"
    # pick a random thumbnail as the preview image
    image_file = "#{a.video.to_param}-thumb_#{rand(5).to_s.rjust(4,"0")}.png"

    a.data = File.new("#{base_dir}zencoder/#{file}")
    a.save

    a.populate_metadata
    a.zencoder_job_complete = true
    a.save

    if size == "-small"
      v = a.video
      v.streaming_asset_id = a.id
      v.available = true
      v.post_date = Date.today
      v.image = File.new("#{base_dir}zencoder/#{image_file}")
      v.save
    end

    # TODO add code to set the primary asset to complete if all assets
    # generated by that one are complete.
    all_done = true
    a.video.assets.each do |as|
      unless as.generated_by_asset_id == 0 && as.generated_by_asset_id.nil?
        unless as.zencoder_job_complete == true
          all_done = false
        end
      end
    end

    if all_done
      generated_by_asset = Asset.find(a.generated_by_asset_id)
      generated_by_asset.zencoder_job_complete = true
      generated_by_asset.save
    end

    respond_to do |format|
      format.js {
        render :text => "ok".to_json
      }
    end
  end
end
